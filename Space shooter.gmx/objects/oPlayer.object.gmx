<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Abaddon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Var init
friction = 0.02;

damageRoll = random_range(0.75, 1.25);

targetRotation = 0;

playerAccel = 0.1;

turnRate = 2;

weaponType = 1;

mySpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place ship parts.
instance_create(x + 9, y - 15, oTurretHardpoint);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Var updates
damageRoll = random_range(0.75, 1.25);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Frame movement &amp; movement sounds
if(mySpeed &lt;= 0)
{
    audio_stop_sound(EngineSound);
    image_index = 0;
}
else if(mySpeed &lt; MAX_SPEED &amp;&amp; speed &gt; 0)
{
    if(!audio_is_playing(EngineSound))
    {
        audio_play_sound(EngineSound, 0, true);
    }
    audio_sound_gain(EngineSound, speed / MAX_SPEED / 8, 0)
    image_index = 1;
}
else if(mySpeed &gt;= MAX_SPEED)
{
    audio_sound_gain(EngineSound, speed / MAX_SPEED / 8, 0)
    image_index = 2;
    mySpeed = MAX_SPEED;
}

x += cos(degtorad(image_angle)) * mySpeed;
y += -sin(degtorad(image_angle)) * mySpeed;

if(mySpeed != 0)
{
    if(mySpeed &gt; 0 &amp;&amp; mySpeed - friction &lt; 0 || mySpeed &lt; 0 &amp;&amp; mySpeed + friction &gt; 0)
    {
        mySpeed = 0;
    }
    
    if(speed &gt; 0)
    {
        mySpeed -= friction;
    }
    else if(speed &lt; 0)
    {
        mySpeed += friction
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check input

if(keyboard_check(ord('1')))
{
    weaponType = 1;
}
if(keyboard_check(ord('2')))
{
    weaponType = 2;
}
if(keyboard_check(ord('W')))
{
    mySpeed += playerAccel;
}
if(keyboard_check(ord('S')))
{
    mySpeed -= playerAccel;
}
if(keyboard_check(ord('A')))
{
    image_angle += turnRate;
}
if(keyboard_check(ord('D')))
{
    image_angle -= turnRate;
}

image_angle = wrap_angle(image_angle);

//Goes through each combination of keys to find out what the target angle is.
//Directional input (up goes up, down goes down)
/*if(keyboard_check(ord('W')))
{
    if(keyboard_check(ord('A')))
    {
        targetRotation = 135;
    }
    else if(keyboard_check(ord('D')))
    {
        targetRotation = 45;
    }
    else
    {
        targetRotation = 90;
    }
    speed += playerAccel;
}
else if(keyboard_check(ord('S')))
{
    if(keyboard_check(ord('A')))
    {
        targetRotation = 225;
    }
    else if(keyboard_check(ord('D')))
    {
        targetRotation = 315;
    }
    else
    {
        targetRotation = 270;
    }
    speed += playerAccel;
}
else if(keyboard_check(ord('A')))
{
    if(keyboard_check(ord('W')))
    {
        targetRotation = 135;
    }
    else if(keyboard_check(ord('S')))
    {
        targetRotation = 225;
    }
    else
    {
        targetRotation = 180;
    }
    speed += playerAccel;
}
else if(keyboard_check(ord('D')))
{
    if(keyboard_check(ord('W')))
    {
        targetRotation = 45;
    }
    else if(keyboard_check(ord('S')))
    {
        targetRotation = 315;
    }
    else
    {
        if(image_angle &gt;= 180)
        {
            targetRotation = 360;
        }
        else
        {
            targetRotation = 0;
        }
    }
    speed += playerAccel;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For directional input

targetRotation = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
