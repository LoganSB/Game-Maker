<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>oPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myParent = object_get_parent(object_index);

laserReady = true;

laserReload = random_range(15, 20);

timeSinceLastShot = laserReload;

iX = x - myParent.x;
iY = y - myParent.y;

distanceFromParentCenter = distance_to_point(myParent.x, myParent.y);

angleToMouse = radtodeg(arctan2(myParent.x - mouse_x, myParent.y - mouse_y)) - 180;
angleToHardpoint = radtodeg(arctan2(x - myParent.x, -(y - myParent.y))) + myParent.image_angle + 90;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//the relative position changes based on:
//the length of the vector from parent center to this center
//the ABSOLUTE(not relative) angle it is at (angle of parent + angle from parents center)
x = myParent.x + distanceFromParentCenter * cos(arctan2(-iY, iX) + degtorad(myParent.image_angle));
y = myParent.y + distanceFromParentCenter * -sin(arctan2(-iY, iX) + degtorad(myParent.image_angle));

timeSinceLastShot++;

if(timeSinceLastShot &gt; laserReload)
{
    laserReady = true;
}

angleToMouse = radtodeg(arctan2(mouse_x - myParent.x, -(mouse_y - myParent.y))) + myParent.image_angle + 90;
if(angleToMouse &lt; -180)
{
    angleToMouse = 180
}
if(angleToMouse &gt; 180)
{
    angleToMouse = -180;
}

angleToHardpoint = radtodeg(arctan2(x - myParent.x, -(y - myParent.y))) + myParent.image_angle + 90;
if(angleToHardpoint &lt; -180)
{
    angleToHardpoint = 180
}
if(angleToHardpoint &gt; 180)
{
    angleToHardpoint = -180;
}

if(angleToMouse &lt; -10 &amp;&amp; angleToHardpoint &lt; -10 || angleToMouse &gt; 10 &amp;&amp; angleToHardpoint &gt; 10)
{
    if(mouse_check_button(mb_left) &amp;&amp; laserReady)
    {
        switch myParent.weaponType
        {
               case 1:
                    instance_create(x, y, oPlasma);
                    laserReload = random_range(15, 20);
                    break;
               case 2:
                    instance_create(x, y, oBeam);
                    laserReload = random_range(65, 70);
                    break;
        }
        timeSinceLastShot = 0;
        laserReady = false
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
