<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>oPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Var init

myParent = object_get_parent(object_index); //player ship

laserReady = true;

laserReload = random_range(15, 20);

timeSinceLastShot = laserReload;

//initial relative position
iX = x - myParent.x;
iY = y - myParent.y;

//used to maintain position
distanceFromParentCenter = sqrt(sqr(x - myParent.x) +  sqr(y - myParent.y));

parentRotation = myParent.image_angle;
parentRotDelta = 0;

//firing arc, possibly uneeded realism
MIN_ANGLE = 10;
MAX_ANGLE = 170;

angleToMouse = wrap_angle(radtodeg(arctan2(-(mouse_y - y), mouse_x - x)) - myParent.image_angle);
angleToHardpoint = wrap_angle(radtodeg(arctan2(-(y - myParent.y), x - myParent.x)) - myParent.image_angle);

angle = angleToMouse; // firing angle
lockedAngle = angle;

locked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update values
//the relative position changes based on:
//the length of the vector from parent center to this center
//the ABSOLUTE(not relative) angle it is at (angle of parent + angle from parents center)
timeSinceLastShot++;

damageRoll = myParent.damageRoll;

if(timeSinceLastShot &gt; laserReload)
{
    laserReady = true;
}

if(parentRotation != myParent.image_angle &amp;&amp; locked)
{
    parentRotDelta = parentRotation - myParent.image_angle;
    parentRotation = myParent.image_angle;
}

angleToMouse = wrap_angle(radtodeg(arctan2(-(mouse_y - y), mouse_x - x)) - myParent.image_angle);

if(angleToMouse &gt; 180)
{
    angleToMouse = angleToMouse;
}

x = myParent.x + distanceFromParentCenter * cos(arctan2(-iY, iX) + degtorad(myParent.image_angle));
y = myParent.y + distanceFromParentCenter * -sin(arctan2(-iY, iX) + degtorad(myParent.image_angle));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input handle
//if the angle to the hardpoint is positive, then the angle to mouse needs to be positive or you shoot through the ship
if((angleToMouse &gt; -MAX_ANGLE &amp;&amp; angleToMouse &lt; -MIN_ANGLE &amp;&amp; angleToHardpoint &lt; 0) || (angleToMouse &lt; MAX_ANGLE &amp;&amp; angleToMouse &gt; MIN_ANGLE &amp;&amp; angleToHardpoint &gt; 0))
{
    angle = 0;
    locked = false;
    parentRotation = myParent.image_angle;
    
    if(mouse_check_button(mb_left) &amp;&amp; laserReady)
    {
        switch myParent.weaponType
        {
               case 1:
                    damageRoll = random_range(0.75, 1.25) //plasma can all be random
                    instance = instance_create(x, y, oPlasma);
                    instance.damage = instance.baseDamage * damageRoll;
                    laserReload = random_range(15, 20);
                    break;
               case 2:
                    instance = instance_create(x, y, oBeam);
                    //damage variation is handled in player to make beams consistant
                    instance.damage = instance.baseDamage * damageRoll;
                    laserReload = random_range(65, 70);
                    break;
        }
        timeSinceLastShot = 0;
        laserReady = false
    }
}
else
{
    if(!locked)
    {
        if(abs(angleToMouse) &lt; 90)
        {
            lockedAngle = sign(angleToMouse) * MIN_ANGLE + myParent.image_angle;
        }
        else
        {
            lockedAngle = sign(angleToMouse) * MAX_ANGLE + myParent.image_angle;         
        }
    }
    lockedAngle = wrap_angle(lockedAngle);
    
    locked = true;
    
    angle -= parentRotDelta;
    parentRotDelta = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
